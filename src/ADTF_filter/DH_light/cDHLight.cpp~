#include "stdafx.h"
#include "cDHLight.h"

ADTF_FILTER_PLUGIN("DH Light", OID_ADTF_DHLIGHT_FILTER, cDHLight);

cDHLight::cDHLight(const tChar* __info):cFilter(__info), m_hTimer(NULL) {
	/*SetPropertyFloat("Faktor", faktor);
	SetPropertyFloat("Faktor" NSSUBPROP_REQUIRED, tTrue);*/
	
/* 	m_mrpm = 0;
	m_mrpm_old = 0;
	for(int i = 0; i<10; i++) m_rpm[i] = 0;
	m_rpmRight = 0;
	m_rpmLeft = 0;
	cRPM = 0; */
	
	
	// m_bFirstTransmit = tFalse;
	
	m_cTimer = 0;
	m_hTimer = NULL;
	
	m_bBrakeLight = tFalse;
	m_bHeadLight = tFalse;
	m_bReverseLight = tFalse;
}

cDHLight::~cDHLight() {}

tResult cDHLight::Init(tInitStage eStage, __exception) {
    RETURN_IF_FAILED(cFilter::Init(eStage, __exception_ptr))
    
    if (eStage == StageFirst) {
		cObjectPtr<IMediaDescriptionManager> pDescManager;
		RETURN_IF_FAILED(_runtime->GetObject(OID_ADTF_MEDIA_DESCRIPTION_MANAGER,IID_ADTF_MEDIA_DESCRIPTION_MANAGER,(tVoid**)&pDescManager,__exception_ptr));
		    
		//input descriptor
 		tChar const * strDescSignalValue = pDescManager->GetMediaDescription("tSignalValue");
		RETURN_IF_POINTER_NULL(strDescSignalValue);        
		cObjectPtr<IMediaType> pTypeSignalValue = new cMediaType(0, 0, 0, "tSignalValue", strDescSignalValue,IMediaDescription::MDF_DDL_DEFAULT_VERSION);	
		RETURN_IF_FAILED(pTypeSignalValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescSignalValue));
		
		tChar const * strDescBoolSignalValue = pDescManager->GetMediaDescription("tBoolSignalValue");
		RETURN_IF_POINTER_NULL(strDescBoolSignalValue);        
		cObjectPtr<IMediaType> pTypeBoolSignalValue = new cMediaType(0, 0, 0, "tBoolSignalValue", strDescBoolSignalValue,IMediaDescription::MDF_DDL_DEFAULT_VERSION);	
		RETURN_IF_FAILED(pTypeBoolSignalValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescBoolSignalValue)); 
	
		// create and register the input pin
/* 		RETURN_IF_FAILED(iPin_rpmLeft.Create("rpmLeft_in", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&iPin_rpmLeft));
		RETURN_IF_FAILED(iPin_rpmRight.Create("rpmRight_in", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&iPin_rpmRight)); */
		RETURN_IF_FAILED(iPin_acc.Create("acc_in", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&iPin_acc));

		// create and register the output pin
		RETURN_IF_FAILED(oPin_brakeLight.Create("brakelight_out", pTypeBoolSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&oPin_brakeLight));
		RETURN_IF_FAILED(oPin_headLight.Create("headLight_out", pTypeBoolSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&oPin_headLight));
		RETURN_IF_FAILED(oPin_reverseLight.Create("reverseLight_out", pTypeBoolSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&oPin_reverseLight));
    } else if (eStage == StageNormal) {
    } else if (eStage == StageGraphReady) {
    }

    RETURN_NOERROR;
}

tResult cDHLight::Shutdown(tInitStage eStage, __exception) {
    if (eStage == StageGraphReady) {}
    else if (eStage == StageNormal) {}
    else if (eStage == StageFirst) {}

    // call the base class implementation
    return cFilter::Shutdown(eStage, __exception_ptr);
}

tResult cDHLight::TransmitBrakeLight(tBool state) {
    //write values with zero
    tUInt32 timeStamp = 0;
    
    //create new media sample
    cObjectPtr<IMediaSample> pMediaSample;
    AllocMediaSample((tVoid**)&pMediaSample);

    //allocate memory with the size given by the descriptor
    cObjectPtr<IMediaSerializer> pSerializer;
    m_pCoderDescBoolSignalValue->GetMediaSampleSerializer(&pSerializer);
    tInt nSize = pSerializer->GetDeserializedSize();
    pMediaSample->AllocBuffer(nSize);
       
    //write date to the media sample with the coder of the descriptor
    {
        __adtf_sample_read_lock_mediadescription(m_pCoderDescBoolSignalValue, pMediaSample, pCoderOutput);

        pCoderOutput->Set("bValue", (tVoid*)&(state));    
        pCoderOutput->Set("ui32ArduinoTimestamp", (tVoid*)&timeStamp);    
    }

    //transmit media sample over output pin
    pMediaSample->SetTime(_clock->GetStreamTime());
	oPin_brakeLight.Transmit(pMediaSample);

    RETURN_NOERROR;
}

tResult cDHLight::TransmitHeadLight(tBool state) {
    //write values with zero
    tUInt32 timeStamp = 0;
    
    //create new media sample
    cObjectPtr<IMediaSample> pMediaSample;
    AllocMediaSample((tVoid**)&pMediaSample);

    //allocate memory with the size given by the descriptor
    cObjectPtr<IMediaSerializer> pSerializer;
    m_pCoderDescBoolSignalValue->GetMediaSampleSerializer(&pSerializer);
    tInt nSize = pSerializer->GetDeserializedSize();
    pMediaSample->AllocBuffer(nSize);
       
    //write date to the media sample with the coder of the descriptor
    {
        __adtf_sample_read_lock_mediadescription(m_pCoderDescBoolSignalValue, pMediaSample, pCoderOutput);

        pCoderOutput->Set("bValue", (tVoid*)&(state));    
        pCoderOutput->Set("ui32ArduinoTimestamp", (tVoid*)&timeStamp);    
    }

    //transmit media sample over output pin
    pMediaSample->SetTime(_clock->GetStreamTime());
	oPin_headLight.Transmit(pMediaSample);

    RETURN_NOERROR;
}

tResult cDHLight::TransmitReverseLight(tBool state) {
    //write values with zero
    tUInt32 timeStamp = 0;
    
    //create new media sample
    cObjectPtr<IMediaSample> pMediaSample;
    AllocMediaSample((tVoid**)&pMediaSample);

    //allocate memory with the size given by the descriptor
    cObjectPtr<IMediaSerializer> pSerializer;
    m_pCoderDescBoolSignalValue->GetMediaSampleSerializer(&pSerializer);
    tInt nSize = pSerializer->GetDeserializedSize();
    pMediaSample->AllocBuffer(nSize);
       
    //write date to the media sample with the coder of the descriptor
    {
        __adtf_sample_read_lock_mediadescription(m_pCoderDescBoolSignalValue, pMediaSample, pCoderOutput);

        pCoderOutput->Set("bValue", (tVoid*)&(state));    
        pCoderOutput->Set("ui32ArduinoTimestamp", (tVoid*)&timeStamp);    
    }

    //transmit media sample over output pin
    pMediaSample->SetTime(_clock->GetStreamTime());
	oPin_reverseLight.Transmit(pMediaSample);

    RETURN_NOERROR;
}

tResult cDHLight::OnPinEvent(IPin* pSource, tInt nEventCode, tInt nParam1, tInt nParam2, IMediaSample* pMediaSample) {
	RETURN_IF_POINTER_NULL(pMediaSample);
	RETURN_IF_POINTER_NULL(pSource);
	
	// if (m_bFirstTransmit == tFalse) TransmitHeadLight(m_bHeadLight = m_bFirstTransmit = tTrue);
	
	if (nEventCode == IPinEventSink::PE_MediaSampleReceived) {	
		tUInt32 ui32ArduinoTimestamp = 0;
		tFloat32 f32Value = 0;
		
		if (m_pCoderDescSignalValue != NULL) {
	        {   // focus for sample read lock
	            __adtf_sample_read_lock_mediadescription(m_pCoderDescSignalValue,pMediaSample,pCoderInput);

				pCoderInput->Get("ui32ArduinoTimestamp", (tVoid*)&ui32ArduinoTimestamp);
	            pCoderInput->Get("f32Value", (tVoid*)&f32Value);
	        }
	        
			if (pSource == &iPin_acc) {
				m_acc_old = m_acc;
				m_acc = f32Value;
				
				//Brakelight
				if( (m_acc >= 0) && (m_acc_old > 0) ) {
					if (m_acc < m_acc_old) {
						if(m_bBrakeLight == tFalse){
							TransmitBrakeLight(tTrue);
							m_bBrakeLight = tTrue;
							createTimer();
						} else {
							m_cTimer = 0;
						}
					}
				} else if( (m_acc <= 0) && (m_acc_old < 0) ) {
					if (m_acc > m_acc_old) {
						if(m_bBrakeLight == tFalse){
							TransmitBrakeLight(tTrue);
							m_bBrakeLight = tTrue;
							createTimer();
						} else {
							m_cTimer = 0;
						}
					}
				} else if(((m_acc > 0) && (m_acc_old < 0)) || ((m_acc < 0) && (m_acc_old > 0))) {
					if(m_bBrakeLight == tFalse){
						TransmitBrakeLight(tTrue);
						m_bBrakeLight = tTrue;
						createTimer();
					} else {
						m_cTimer = 0;
					}
				}
				
				//Reverselight
				if (m_acc < 0) {
					TransmitReverseLight(tTrue);
					m_bReverseLight = tTrue;
				} else if( (m_acc > 0) && (m_bReverseLight == tTrue) ) {
					TransmitReverseLight(tFalse);
					m_bReverseLight = tFalse;
				}
				
				//HeadLight
				if(m_acc > 0) {
					if(m_bHeadLight != tTrue){
						TransmitHeadLight(tTrue);
						m_bHeadLight = tTrue;
					}
				}
				
			}
			
			
			
/* 	        if (pSource == &iPin_rpmLeft || pSource == &iPin_rpmRight ) {
				if (pSource == &iPin_rpmLeft) {
					m_rpmLeft = f32Value;
				} else {
					m_rpmRight = f32Value;
			    }
			    
			    ++cRPM %= 10;
				m_rpm[cRPM] = (m_rpmLeft + m_rpmRight)/2;
				
				tFloat32 g = 0;
				for(int i=0; i<10; i++){
					g = g + m_rpm[i];
					}
				m_mrpm = g/10;
				
			} */
	    }
    }
	RETURN_NOERROR;
}

tResult cDHLight::Run(tInt nActivationCode, const tVoid* pvUserData, tInt szUserDataSize, ucom::IException** __exception_ptr/* =NULL */)
{
    if (nActivationCode == IRunnable::RUN_TIMER)
    {
		if(m_cTimer < 10)
			m_cTimer++;
		else {
			TransmitBrakeLight(tFalse);
			m_bBrakeLight = tFalse;
			m_cTimer = 0;
			destroyTimer();
		}
		
/*     	if(m_mrpm < m_mrpm_old)
        	TransmitBrakeLight(tTrue);
    	else
    		TransmitBrakeLight(tFalse);
		m_mrpm_old = m_mrpm; */
    }
    		    
    return cFilter::Run(nActivationCode, pvUserData, szUserDataSize, __exception_ptr);
}

tResult cDHLight::createTimer()
{
     // creates timer with 0.5 sec
     __synchronized_obj(m_oCriticalSectionTimerSetup);
     if (m_hTimer == NULL)
     {
            m_hTimer = _kernel->TimerCreate(0.1*1000000, 0, static_cast<IRunnable*>(this),
                                        NULL, NULL, 0, 0, adtf_util::cString::Format("%s.timer", OIGetInstanceName()));
     }
     else
     {
        LOG_ERROR("Timer is already running. Unable to create a new one.");
     }
     RETURN_NOERROR;
}

tResult cDHLight::destroyTimer(__exception)
{
    __synchronized_obj(m_oCriticalSectionTimerSetup);
    //destroy timer
    if (m_hTimer != NULL) 
    {        
        tResult nResult = _kernel->TimerDestroy(m_hTimer);
        if (IS_FAILED(nResult))
        {
            LOG_ERROR("Unable to destroy the timer.");
            THROW_ERROR(nResult);
        }
        m_hTimer = NULL;
    }
    //check if handle for some unknown reason still exists
    else       
    {
        LOG_WARNING("Timer handle not set, but I should destroy the timer. Try to find a timer with my name.");
        tHandle hFoundHandle = _kernel->FindHandle(adtf_util::cString::Format("%s.timer", OIGetInstanceName()));
        if (hFoundHandle)
        {
            tResult nResult = _kernel->TimerDestroy(hFoundHandle);
            if (IS_FAILED(nResult))
            {
                LOG_ERROR("Unable to destroy the found timer.");
                THROW_ERROR(nResult);
            }
        }
    }

    RETURN_NOERROR;
}

tResult cDHLight::Start(__exception)
{
	if(m_bHeadLight != tTrue){
		TransmitHeadLight(tTrue);
		m_bHeadLight = tTrue;
	}
	
    return cFilter::Start(__exception_ptr);
}

tResult cDHLight::Stop(__exception)
{
	if(m_bBrakeLight)
		TransmitBrakeLight(tFalse);
	if(m_bHeadLight)
		TransmitHeadLight(tFalse);
	if(m_bReverseLight)
		TransmitReverseLight(tFalse);
	
	m_bBrakeLight = tFalse;
	m_bHeadLight = tFalse;
	m_bReverseLight = tFalse;
	
    __synchronized_obj(m_oCriticalSectionTimerSetup);
    
    if(m_hTimer)
    	destroyTimer(__exception_ptr);

    return cFilter::Stop(__exception_ptr);
}

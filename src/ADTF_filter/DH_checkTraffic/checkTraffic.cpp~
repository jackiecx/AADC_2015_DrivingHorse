#include "stdafx.h"
#include "checkTraffic.h"

#include <iostream>

/// Create filter shell
ADTF_FILTER_PLUGIN("Check Traffic", OID_ADTF_CHECKTRAFFIC_FILTER, cCheckTraffic);

cCheckTraffic::cCheckTraffic(const tChar* __info) : cFilter(__info), m_hTimer(NULL) {

	SetPropertyFloat("Distance right", 120);
	SetPropertyFloat("Distance right" NSSUBPROP_REQUIRED, tTrue);
	SetPropertyFloat("Distance right" NSSUBPROP_ISCHANGEABLE, tTrue);
	
	SetPropertyFloat("Distance front", 90);
	SetPropertyFloat("Distance front" NSSUBPROP_REQUIRED, tTrue);
	SetPropertyFloat("Distance front" NSSUBPROP_ISCHANGEABLE, tTrue);
	
	SetPropertyFloat("Distance left", 70);
	SetPropertyFloat("Distance left" NSSUBPROP_REQUIRED, tTrue);
	SetPropertyFloat("Distance left" NSSUBPROP_ISCHANGEABLE, tTrue);
	
	SetPropertyFloat("min change", 10);
	SetPropertyFloat("min change" NSSUBPROP_REQUIRED, tTrue);
	SetPropertyFloat("min change" NSSUBPROP_ISCHANGEABLE, tTrue);
	
	SetPropertyFloat("check intervall", 2);
	SetPropertyFloat("check intervall" NSSUBPROP_REQUIRED, tTrue);
	SetPropertyFloat("check intervall" NSSUBPROP_ISCHANGEABLE, tTrue);

}

cCheckTraffic::~cCheckTraffic() {

}

tResult cCheckTraffic::Init(tInitStage eStage, __exception) {
    // never miss calling the parent implementation!!
    RETURN_IF_FAILED(cFilter::Init(eStage, __exception_ptr))
    
    // in StageFirst you can create and register your static pins.
    if (eStage == StageFirst)
    {
        // get a media type for the input pin
		cObjectPtr<IMediaDescriptionManager> pDescManager;
        RETURN_IF_FAILED(_runtime->GetObject(OID_ADTF_MEDIA_DESCRIPTION_MANAGER,IID_ADTF_MEDIA_DESCRIPTION_MANAGER,(tVoid**)&pDescManager,__exception_ptr));
        
        //input descriptor
        tChar const * strDescSignalValue = pDescManager->GetMediaDescription("tSignalValue");
        RETURN_IF_POINTER_NULL(strDescSignalValue);        
        cObjectPtr<IMediaType> pTypeSignalValue = new cMediaType(0, 0, 0, "tSignalValue", strDescSignalValue,IMediaDescription::MDF_DDL_DEFAULT_VERSION);	
        RETURN_IF_FAILED(pTypeSignalValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescSignalInput)); 
		
		tChar const * strDescBoolSignalValueInput = pDescManager->GetMediaDescription("tBoolSignalValue");
        RETURN_IF_POINTER_NULL(strDescBoolSignalValueInput);        
        cObjectPtr<IMediaType> pTypeBoolSignalValue = new cMediaType(0, 0, 0, "tBoolSignalValue", strDescBoolSignalValueInput,IMediaDescription::MDF_DDL_DEFAULT_VERSION);	
		RETURN_IF_FAILED(pTypeBoolSignalValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescBoolSignalInput));
	
        tChar const * strDescCrossingTypeInput = pDescManager->GetMediaDescription("tCrossingType");
		if(!strDescCrossingTypeInput) LOG_ERROR(cString(OIGetInstanceName()) + ": Could not load mediadescription tCrossingType, check path");
		RETURN_IF_POINTER_NULL(strDescCrossingTypeInput);
		cObjectPtr<IMediaType> pTypeCrossingTypeInput = new cMediaType(0, 0, 0, "tCrossingType", strDescCrossingTypeInput, IMediaDescription::MDF_DDL_DEFAULT_VERSION);
		RETURN_IF_FAILED(pTypeCrossingTypeInput->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescCrossingTypeInput));	
		
		
        // create and register the input pin

	//USS
		RETURN_IF_FAILED(m_pin_input_range_front_left.Create("range_front_left", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&m_pin_input_range_front_left));
		RETURN_IF_FAILED(m_pin_input_range_front_right.Create("range_front_right", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&m_pin_input_range_front_right));

	//IR
		RETURN_IF_FAILED(m_pin_input_ir_front_center_long.Create("ir_front_center_long", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&m_pin_input_ir_front_center_long));
		RETURN_IF_FAILED(m_pin_input_ir_front_center_short.Create("ir_front_center_short", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&m_pin_input_ir_front_center_short));

	//CROSSING TYPE
		RETURN_IF_FAILED(m_pin_input_crossing_type.Create("crossing_type_in", pTypeCrossingTypeInput, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&m_pin_input_crossing_type));


	//RESET
		RETURN_IF_FAILED(m_pin_input_reset.Create("reset", pTypeBoolSignalValue, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&m_pin_input_reset));

        // get a media type for the output pin
		tChar const * strDescSignalValueOutput = pDescManager->GetMediaDescription("tSignalValue");
        RETURN_IF_POINTER_NULL(strDescSignalValueOutput);        
        cObjectPtr<IMediaType> pTypeSignalValueOutput = new cMediaType(0, 0, 0, "tSignalValue", strDescSignalValueOutput,IMediaDescription::MDF_DDL_DEFAULT_VERSION);	
        RETURN_IF_FAILED(pTypeSignalValueOutput->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescSignalOutput)); 
        
        tChar const * strDescBoolSignalValue = pDescManager->GetMediaDescription("tBoolSignalValue");
        RETURN_IF_POINTER_NULL(strDescBoolSignalValue);        
        cObjectPtr<IMediaType> pTypeBoolSignalValueOutput = new cMediaType(0, 0, 0, "tBoolSignalValue", strDescBoolSignalValue,IMediaDescription::MDF_DDL_DEFAULT_VERSION);	
		RETURN_IF_FAILED(pTypeBoolSignalValueOutput->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescBoolSignalOutput)); 
	
        tChar const * strDescCrossingTypeOutput = pDescManager->GetMediaDescription("tCrossingType");
		if(!strDescCrossingTypeOutput) LOG_ERROR(cString(OIGetInstanceName()) + ": Could not load mediadescription tCrossingType, check path");
		RETURN_IF_POINTER_NULL(strDescCrossingTypeOutput);
		cObjectPtr<IMediaType> pTypeCrossingTypeOutput = new cMediaType(0, 0, 0, "tCrossingType", strDescCrossingTypeOutput, IMediaDescription::MDF_DDL_DEFAULT_VERSION);
		RETURN_IF_FAILED(pTypeCrossingTypeOutput->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescCrossingTypeOutput));	
        
        // create and register the output pin
		RETURN_IF_FAILED(m_pin_output_crossing_type.Create("crossing_type_out", pTypeCrossingTypeOutput, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&m_pin_output_crossing_type));

		// get properties
		m_maxdistright = tFloat32(GetPropertyFloat("Distance right"));
		m_maxdistfront = tFloat32(GetPropertyFloat("Distance front"));
		m_maxdistleft = tFloat32(GetPropertyFloat("Distance left"));
		m_minchange = tFloat32(GetPropertyFloat("min change"));
		m_recheckint = tFloat32(GetPropertyFloat("check intervall"));

		//set distance, status and active
		active = 0;
		status = 0;
		m_type = 0;
		m_count = 0;
		m_front_old = 0;
		m_left_old = 0;
		m_right_old = 0;
		m_hTimer = NULL;
    }
    else if (eStage == StageNormal)
    {
        // In this stage you would do further initialisation and/or create your dynamic pins.
        // Please take a look at the demo_dynamicpin example for further reference.
    }
    else if (eStage == StageGraphReady)
    {
        // All pin connections have been established in this stage so you can query your pins
        // about their media types and additional meta data.
        // Please take a look at the demo_imageproc example for further reference.
    }

    RETURN_NOERROR;
}

tResult cCheckTraffic::Shutdown(tInitStage eStage, __exception)
{
    // In each stage clean up everything that you initiaized in the corresponding stage during Init.
    // Pins are an exception: 
    // - The base class takes care of static pins that are members of this class.
    // - Dynamic pins have to be cleaned up in the ReleasePins method, please see the demo_dynamicpin
    //   example for further reference.
    
    if (eStage == StageGraphReady)
    {
    }
    else if (eStage == StageNormal)
    {
    }
    else if (eStage == StageFirst)
    {
    }

    // call the base class implementation
    return cFilter::Shutdown(eStage, __exception_ptr);
}

tResult cCheckTraffic::OnPinEvent(IPin* pSource, tInt nEventCode, tInt nParam1, tInt nParam2, IMediaSample* pMediaSample)
{
    // first check what kind of event it is
	RETURN_IF_POINTER_NULL(pMediaSample);
	RETURN_IF_POINTER_NULL(pSource);

	if (nEventCode == IPinEventSink::PE_MediaSampleReceived)
	{     

		//INPUT
		
		//Aktivieren
		if (pSource == &m_pin_input_crossing_type) {
			
			//write values with zero			
		    tInt8 i8CrossingType = 0;
		    
		        {   // focus for sample read lock
		            __adtf_sample_read_lock_mediadescription(m_pCoderDescCrossingTypeInput,pMediaSample,pCoder);

		            pCoder->Get("i8Identifier", (tVoid*)&i8CrossingType);
		        }
			
			if((i8CrossingType < 4) && (i8CrossingType > 0) && (active == 0)) {
				active = 1;
				m_type = i8CrossingType;
				status = 1; // => Vorfahrt achten!
				cout << "Vorfahrt achten!" << endl;
				cout << "checke...";
				createTimer();
			} else if((i8CrossingType < 7) && (i8CrossingType >= 4) && (active == 0)) {
				active = 1;
				m_type = i8CrossingType - 3;
				if(m_type == 1){
					status = 1; // => Rechts vor Links! mit Linksabbiegen
					cout << "Rechts vor Links - Linksabbiegen" << endl;
					cout << "checke...";
					}
				else {
					status = 2; // => Rechts vor Links!
					cout << "Rechts vor Links" << endl;
					cout << "checke...";
					}
				createTimer();
			} else if((i8CrossingType < 10) && (i8CrossingType >= 7) && (active == 0)) {
				active = 1;
				m_type = i8CrossingType - 6;
				status = 3; // => Freie fahrt!
				cout << "freie Fahrt!" << endl;
				TransmitCrossingType(m_type);
				FilterReset();
			}
		} else if (pSource == &m_pin_input_reset) {
			//write values with zero			
			tBool bValue = tFalse;			
			
			{   // focus for sample read lock
				// read-out the incoming Media Sample                
		        __adtf_sample_read_lock_mediadescription(m_pCoderDescBoolSignalInput,pMediaSample,pCoderInput);

		        //get values from media sample        
		        pCoderInput->Get("bValue", (tVoid*)&bValue);
			}
			
			
			if((bValue == tTrue) && (active != 0)) {
				FilterReset();
			}
		} else {
			
			
			//write values with zero
			tFloat32 signalValue = 0;
			tUInt32  timeStamp = 0;
			
			{   // focus for sample read lock
				// read-out the incoming Media Sample                
		        __adtf_sample_read_lock_mediadescription(m_pCoderDescSignalInput,pMediaSample,pCoderInput);

		        //get values from media sample        
		        pCoderInput->Get("f32Value", (tVoid*)&signalValue);
		        pCoderInput->Get("ui32ArduinoTimestamp", (tVoid*)&timeStamp);		
			}
			
			//Lücke suchen
			if (pSource == &m_pin_input_ir_front_center_short) {
				m_sensor_front_short = signalValue;
			} else if (pSource == &m_pin_input_ir_front_center_long) {
				m_sensor_front_long = signalValue;
			} else if (pSource == &m_pin_input_range_front_left) {
				m_ussensor_front_left = signalValue;
			} else if (pSource == &m_pin_input_range_front_right) {
				m_ussensor_front_right = signalValue;
			}
		}
	}

    RETURN_NOERROR;
}

tResult cCheckTraffic::TransmitCrossingType(const tInt8 crossingType) {    
    //create new media sample
    cObjectPtr<IMediaSample> pMediaSample;
    AllocMediaSample((tVoid**)&pMediaSample);

    //allocate memory with the size given by the descriptor
    cObjectPtr<IMediaSerializer> pSerializer;
    m_pCoderDescCrossingTypeOutput->GetMediaSampleSerializer(&pSerializer);
    tInt nSize = pSerializer->GetDeserializedSize();
    pMediaSample->AllocBuffer(nSize);
    
    //write date to the media sample with the coder of the descriptor    
    {   // focus for sample write lock

        __adtf_sample_write_lock_mediadescription(m_pCoderDescCrossingTypeOutput,pMediaSample,pCoderOutput);
        pCoderOutput->Set("i8Identifier", (tVoid*)&(crossingType));    
    }    
    
    //transmit media sample over output pin
    pMediaSample->SetTime(_clock->GetStreamTime());
    m_pin_output_crossing_type.Transmit(pMediaSample);
    
    RETURN_NOERROR;
}

tResult cCheckTraffic::FilterReset() {
	active = 0;
	status = 0;
	m_type = 0;
	m_count = 0;
	m_front_old = 0;
	m_left_old = 0;
	m_right_old = 0;
	m_master_count = 0;
	if(m_hTimer)
		destroyTimer();
	RETURN_NOERROR;
}


tResult cCheckTraffic::Run(tInt nActivationCode, const tVoid* pvUserData, tInt szUserDataSize, ucom::IException** __exception_ptr/* =NULL */)
{
    if (nActivationCode == IRunnable::RUN_TIMER)
    {
		if(active == 1) {
			if(status == 1) {
				if(m_count < 3) {					
					cout << (int)m_count << "...";
					//cout << "Front: " << m_sensor_front_long << "Left: " << m_ussensor_front_left << "Right: " << m_ussensor_front_right << endl;
					if( (m_sensor_front_long < m_maxdistfront) ||
						(m_ussensor_front_left < m_maxdistleft) ||
						(m_ussensor_front_right < m_maxdistright) ) {
						if(m_sensor_front_long < m_maxdistfront) {
							if( (m_front_old != 0) && 
								!( 
								(m_sensor_front_long < (m_front_old - m_minchange)) ||
								(m_sensor_front_long > (m_front_old + m_minchange))
							 	) 
							) {
								if(m_type != 2)
									m_count++;
							} else
								m_count = 0;
							m_front_old = m_sensor_front_long;
						}
						if(m_ussensor_front_left < m_maxdistleft) {
							if( (m_left_old != 0) && 
								!( 
								(m_ussensor_front_left < (m_left_old - m_minchange)) ||
								(m_ussensor_front_left > (m_left_old + m_minchange))
							 	) 
							) m_count++;
							else m_count = 0;
							m_left_old = m_ussensor_front_left;
						}
						if(m_ussensor_front_right < m_maxdistright) {
							if( (m_right_old != 0) && 
								!( 
								(m_ussensor_front_right < (m_right_old - m_minchange)) ||
								(m_ussensor_front_right > (m_right_old + m_minchange))
							 	) 
							) m_count++;
							else m_count = 0;
							m_right_old = m_ussensor_front_right;
						}
					} else {
						m_count++;
					}
				} else {
					cout << "FREI!" << endl;
					TransmitCrossingType(m_type);
					FilterReset();
				}
			} else if(status == 2) {
				if(m_count < 3) {
					if( (m_sensor_front_long < m_maxdistfront) ||
						(m_ussensor_front_right < m_maxdistright) ) {
						if(m_sensor_front_long < m_maxdistfront) {
							if( (m_front_old != 0) && 
								!( 
								(m_sensor_front_long < (m_front_old - m_minchange)) ||
								(m_sensor_front_long > (m_front_old + m_minchange))
							 	) 
							) {
								if(m_type != 2)
									m_count++;
							} else
								m_count = 0;
							m_front_old = m_sensor_front_long;
						}
						if(m_ussensor_front_right < m_maxdistright) {
							if( (m_right_old != 0) && 
								!( 
								(m_ussensor_front_right < (m_right_old - m_minchange)) ||
								(m_ussensor_front_right > (m_right_old + m_minchange))
							 	) 
							) m_count++;
							else m_count = 0;
							m_right_old = m_ussensor_front_right;
						}
					} else {
						m_count++;
					}
				} else {
					cout << "FREI!" << endl;
					TransmitCrossingType(m_type);
					FilterReset();
				}
			}
			if(m_master_count < 10 && ( (status == 1) || (status == 2) ))
				m_master_count++;
			else {
				cout << "Abbruch...Fahr einfach" << endl;
				TransmitCrossingType(m_type);
				FilterReset();
			}
		
		}
    }
    

    
    return cFilter::Run(nActivationCode, pvUserData, szUserDataSize, __exception_ptr);
}

tResult cCheckTraffic::createTimer()
{
     // creates timer with 0.1 sec
     __synchronized_obj(m_oCriticalSectionTimerSetup);
     if (m_hTimer == NULL)
     {
            m_hTimer = _kernel->TimerCreate(0.5*1000000, 0, static_cast<IRunnable*>(this),
                                        NULL, NULL, 0, 0, adtf_util::cString::Format("%s.timer", OIGetInstanceName()));
     }
     else
     {
        LOG_ERROR("Timer is already running. Unable to create a new one.");
     }
     RETURN_NOERROR;
}

tResult cCheckTraffic::destroyTimer(__exception)
{
    __synchronized_obj(m_oCriticalSectionTimerSetup);
    //destroy timer
    if (m_hTimer != NULL) 
    {        
        tResult nResult = _kernel->TimerDestroy(m_hTimer);
        if (IS_FAILED(nResult))
        {
            LOG_ERROR("Unable to destroy the timer.");
            THROW_ERROR(nResult);
        }
        m_hTimer = NULL;
    }
    //check if handle for some unknown reason still exists
    else       
    {
        LOG_WARNING("Timer handle not set, but I should destroy the timer. Try to find a timer with my name.");
        tHandle hFoundHandle = _kernel->FindHandle(adtf_util::cString::Format("%s.timer", OIGetInstanceName()));
        if (hFoundHandle)
        {
            tResult nResult = _kernel->TimerDestroy(hFoundHandle);
            if (IS_FAILED(nResult))
            {
                LOG_ERROR("Unable to destroy the found timer.");
                THROW_ERROR(nResult);
            }
        }
    }

    RETURN_NOERROR;
}

tResult cCheckTraffic::Start(__exception)
{
    return cFilter::Start(__exception_ptr);
}

tResult cCheckTraffic::Stop(__exception)
{
    __synchronized_obj(m_oCriticalSectionTimerSetup);
    
    if(m_hTimer)
    	destroyTimer(__exception_ptr);

    return cFilter::Stop(__exception_ptr);
}

tResult cCheckTraffic::PropertyChanged(const char* strProperty) {

	m_maxdistright = tFloat32(GetPropertyFloat("max Distance right"));
	m_maxdistfront = tFloat32(GetPropertyFloat("max Distance front"));
	m_maxdistleft = tFloat32(GetPropertyFloat("max Distance left"));
	m_minchange = tFloat32(GetPropertyFloat("min change"));
	m_recheckint = tFloat32(GetPropertyFloat("recheck intervall"));

	RETURN_NOERROR;
}

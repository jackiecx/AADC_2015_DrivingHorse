/**
Copyright (c) 
Audi Autonomous Driving Cup. All rights reserved.
 
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 
1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
3.  All advertising materials mentioning features or use of this software must display the following acknowledgement: “This product includes software developed by the Audi AG and its contributors for Audi Autonomous Driving Cup.”
4.  Neither the name of Audi nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY AUDI AG AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL AUDI AG OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


**********************************************************************
* $Author:: forchhe#$  $Date:: 2014-09-11 10:10:54#$ $Rev:: 25921   $
**********************************************************************/

#ifndef _DH_DRIVER_MODULE_HEADER_
#define _DH_DRIVER_MODULE_HEADER_

#define __guid "adtf.dh.driverModule"

#include "stdafx.h"
#include "juryEnums.h"

class cStateController: public adtf::cFilter {
    ADTF_DECLARE_FILTER_VERSION(__guid, "DH Driver Module", OBJCAT_Tool, "DH Driver Module", 1, 0, 0, "Beta Version");    

public:
    cStateController(const tChar *);
    virtual ~cStateController();

    virtual tResult Init(tInitStage eStage, __exception = NULL);
    virtual tResult Start(__exception = NULL);
    virtual tResult Stop(__exception = NULL);
    virtual tResult Shutdown(tInitStage eStage, __exception = NULL);
    tResult OnPinEvent(IPin* pSource, tInt nEventCode, tInt nParam1, tInt nParam2, IMediaSample* pMediaSample);
    tResult Run(tInt nActivationCode, const tVoid* pvUserData, tInt szUserDataSize, ucom::IException** __exception_ptr=NULL);

    tResult TransmitDriverStruct(stateCar state, tInt16 i16ManeuverEntry);
    tResult TransmitAcc(const tFloat32 acc);
    tResult TransmitAng(const tFloat32 ang);
    tResult TransmitCrossingType(const tInt8 crossingType);
    
    tResult createTimer();
    tResult destroyTimer(__exception = NULL);
    tResult incrementManeuverID();
    tResult resetSection();
    tResult changeState(stateCar newState);
    tResult setManeuverID(tInt maneuverId);
    tResult loadManeuverList();

    // Coder Descriptor
    cObjectPtr<IMediaTypeDescription> m_pCoderDescJuryStruct;
   	cObjectPtr<IMediaTypeDescription> m_pCoderDescRoadSign;
    cObjectPtr<IMediaTypeDescription> m_pCoderDescDriverStruct;
   	cObjectPtr<IMediaTypeDescription> m_pCoderDescCrossingType;
    cObjectPtr<IMediaTypeDescription> m_pCoderDescSignalValue;

    // whether output to console is enabled or not
    tBool m_bDebugModeEnabled;

    // this is the filename of the maneuver list
    cFilename m_maneuverListFile;

    // this is the list with all the loaded sections from the maneuver list
    std::vector<tSector> m_sectorList;

    stateCar m_state;
    tInt16 m_i16CurrentManeuverID;
    tInt16 m_i16ManeuverListIndex;
    tInt16 m_i16SectionListIndex;


    tHandle m_hTimer;
    cCriticalSection m_oCriticalSectionTransmit;
    cCriticalSection m_oCriticalSectionTimerSetup;
    
    cInputPin 	iPin_juryStruct;
	cInputPin	iPin_roadSign;
	
	cInputPin	iPin_laneAssist_ang;
	
	cInputPin	iPin_crossing_ang;
	cInputPin	iPin_crossing_acc;
	
	cOutputPin	oPin_ang;
	cOutputPin	oPin_acc;
	cOutputPin	oPin_driverStruct;
	cOutputPin	oPin_crossingTrigger;

	// properties
	tFloat32 m_ang;
	tFloat32 m_acc;
};

#endif
